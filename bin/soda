#!/bin/bash

usage()
{
    local cmd=$(basename $0)
    cat << EOF
usage:
    $cmd init  <work> [lang]
    $cmd new   <lang>
    $cmd run   <lang> [-i <tag>]
    $cmd clean <lang>
    $cmd tool  <lang> [options]
EOF
    exit 1
}

self_dir=$(cd $(dirname $0) && pwd)
soda_dir=$(dirname $self_dir)
framework_dir=$soda_dir/framework
export SODA_FRAMEWORK_DIR=$framework_dir
project_file=soda.prj.yml

cmd=$1

function init_work()
{
    local work=$1
    [ -e $project_file ] && { echo "$project_file already exists"; exit 2; }
    cat >$project_file << eof
soda:
  version: 2.0.1
  work_name: $work
  run:
    java:
      mode: normal
eof
    echo $project_file generated
}

function get_work_name()
{
    python3 << eof
import yaml
with open("$project_file", "rt") as fp:
    config = yaml.load(fp, Loader=yaml.FullLoader)
    print(config['soda']['work_name'])
eof
}

function check_sdk()
{
    ilang=$1
    [ -z "$ilang" ] && usage
    sdk_dir=$framework_dir/$ilang
    [ -e $sdk_dir ] || { echo "language '$ilang' not supported"; exit 3; }
}

function execute()
{
    local work=$1
    local ilang=$2
    export PYTHONPATH="$framework_dir/python/src:$PYTHONPATH"
    runner=soda.engine.main
    python3 -m $runner $work --script "$framework_dir/$ilang/work.sh"
}

function get_java_running_mode()
{
    python3 << eof
import yaml
with open("$project_file", "rt") as fp:
    config = yaml.load(fp, Loader=yaml.FullLoader)
    print(config['soda']['run']['java']['mode'])
eof
}

function create_work()
{
    ilang=$1
    check_sdk $ilang
    work=$(get_work_name)
    $framework_dir/$ilang/work.sh new $work || exit
    lowcase=$(echo "$work" | awk '{print tolower($0)}')
    test_file=${lowcase}.input
    [ -e $test_file ] || echo -e '#@format=case\n' > $test_file
}

function parse_run_args()
{
    local args=("$@")
    local i=0
    while [ $i -lt "${#args[@]}" ]; do
        local t=${args[$i]}
        if [ "$t" == "-i" ]; then
            ((i++))
            tags=${args[$i]}
        elif [ "$t" == "-f" ]; then
            force_rebuild=yes
        fi
        ((i++))
    done
}

tags=
force_rebuild=no

case $cmd in 
    init)
        work=$2
        [ -z "$work" ] && usage
        init_work $work
        [ -z $3 ] || create_work "$3"
        ;;
    new)
        ilang=$2
        [ -z "$ilang" ] && usage
        create_work $ilang
        ;;
    run)
        # prepare sdk
        ilang=$2
        check_sdk $ilang
        script=$framework_dir/$ilang/work.sh
        work=$(get_work_name)
        # parse command line options
        parse_run_args "$@"
        # build executable
        if [ "$force_rebuild" == "yes" ]; then
            $script make $work -f || exit
        else
            $script make $work || exit 
        fi
        # run test cases
        export PYTHONPATH="$framework_dir/python/src:$PYTHONPATH"
        runner=soda.engine.main
        commandStr="$script run $work"
        if [ "$ilang" == "java" -a "$(get_java_running_mode)" == "server" ]; then
            commandStr="$script run $work -server"
        fi
        [ -z "$tags" ] || tag_options="--tags $tags"
        python3 -m $runner $work --command "$commandStr" $tag_options
        ;;
    clean)
        ilang=$2
        check_sdk $ilang
        script=$framework_dir/$ilang/work.sh
        work=$(get_work_name)
        $script clean $work
        ;;
    tool)
        ilang=$2
        check_sdk $ilang
        script=$framework_dir/$ilang/work.sh
        shift; shift;
        $script "$@"
        ;;
    *)
        usage
        ;;
esac
