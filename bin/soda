#!/bin/bash

usage()
{
    local cmd=$(basename $0)
    cat << EOF
usage:
    $cmd init  <work> [lang]
    $cmd new   <lang>
    $cmd run   <lang> [-i <tag>]
    $cmd clean <lang>
    $cmd call  <lang> [options]
EOF
    exit 1
}

self_dir=$(cd $(dirname $0) && pwd)
soda_dir=$(dirname $self_dir)
framework_dir=$soda_dir/framework
export SODA_FRAMEWORK_DIR=$framework_dir
project_file=soda.prj.yml
dku=$self_dir/docker-utils.sh

cmd=$1

function init_work()
{
    local work=$1
    [ -e $project_file ] && { echo "$project_file already exists"; exit 2; }
    cat >$project_file << eof
soda:
  version: 2.0.1
  work_name: $work
eof
    echo $project_file DONE

    # create file of test case
    lowcase=$(echo "$work" | awk '{print tolower($0)}')
    test_file=${lowcase}.input
    cat >$test_file <<EOF
#@format=case

# number of arguments
# @args=N

# test case directive, '@case' is required, all key value settings are optional
# @case skip=false timeout=10 tag=
#
# content:
#   format 1: @include=FILEPATH
#   format 2:
#       Input: nums = [1,2,3,1], k = 3, t = 0
#       Output: true
#   format 3:
#       [1,2,3,1]
#       3
#       0
#       true

EOF

    echo $test_file DONE
}

function get_work_name()
{
    python3 << eof
import yaml
with open("$project_file", "rt") as fp:
    config = yaml.load(fp, Loader=yaml.FullLoader)
    print(config['soda']['work_name'])
eof
}

function check_sdk()
{
    ilang=$1
    [ -z "$ilang" ] && usage
    sdk_dir=$framework_dir/$ilang
    [ -e $sdk_dir ] || { echo "language '$ilang' not supported"; exit 3; }
}

function prepare_working_dir()
{
    local workdir=$($dku show $ilang workdir)
    local container=$($dku show $ilang container)
    docker exec -u $(id -un) $container bash -c "[ -e $workdir ] || mkdir -p $workdir"
}

function create_work()
{
    local ilang=$1
    work=$(get_work_name)
    [ -z $work ] && exit

    source_file=$($framework_dir/$ilang/work.sh source $work)
    [ -e $source_file ] && { echo "Error: $source_file already exists" >&2; exit 2; }

    set -e

    docker_prepare

    # initialize working dir in container
    prepare_working_dir

    # sync project file
#    $dku sync-file $ilang $project_file

    # init source file in container
    $dku play $ilang /soda/framework/$ilang/work.sh new $work

    # pull source file to local
    workdir=$($dku show $ilang workdir)
    container=$($dku show $ilang container)
    docker cp $container:$workdir/$source_file ./

    set +e
}

function docker_prepare()
{
    $dku start $ilang
}

function parse_run_args()
{
    local args=("$@")
    local i=0
    while [ $i -lt "${#args[@]}" ]; do
        local t=${args[$i]}
        if [ "$t" == "-i" ]; then
            ((i++))
            tags=${args[$i]}
        elif [ "$t" == "--clean" ]; then
            force_rebuild=yes
        elif [ "$t" == "--remote" ]; then
            remote_mode=yes
        elif [ "$t" == "--restore" ]; then
            restore_work=yes
        fi
        ((i++))
    done
}

function trans_lang_name()
{
    local name=$1
    case $name in
        cs)
            name=csharp
            ;;
        py)
            name=python
            ;;
        *)
            ;;
    esac
    echo $name
}

tags=
force_rebuild=no
remote_mode=no
restore_work=no

function lang_prepare()
{
    ilang=$1
    ilang=$(trans_lang_name $ilang)
    [ -z "$ilang" ] && usage
    check_sdk $ilang
}

function restore_work_in_container()
{
    set -e

    # remote work if exists
    $dku rm-proj $ilang

    # prepare working directory
    prepare_working_dir

    # create work
    local work=$(get_work_name)
    $dku play $ilang /soda/framework/$ilang/work.sh new $work
}

function run_work()
{
    set -e

    docker_prepare

    if [ "$restore_work" == "yes" ]; then
        restore_work_in_container
    else
        prepare_working_dir
    fi

    work=$(get_work_name)
    source_file=$($framework_dir/$ilang/work.sh source $work)
    $dku sync-file $ilang $source_file

    script="$dku play $ilang /soda/framework/$ilang/work.sh"
    # build executable
    [ "$force_rebuild" == "yes" ] && $script clean $work
    $script make $work || exit 

    # compose command arguments
    export PYTHONPATH="$framework_dir/python/src:$PYTHONPATH"
    runner=soda.engine.main
    commandStr="$script run $work"
    if [ "$remote_mode" == "yes" ]; then
        commandStr="$commandStr --remote"
        # setup remote server
        $script remote-setup $work || exit
    fi

    # tags to filter test case
    [ -z "$tags" ] || tag_options="--tags $tags"

    # run test cases
    python3 -m $runner $work --command "$commandStr" $tag_options
}

case $cmd in 
    init)
        work=$2
        [ -z "$work" ] && usage
        init_work $work
        [ -z $3 ] || { lang_prepare "$3"; create_work $ilang; }
        ;;
    new)
        lang_prepare "$2"
        create_work $ilang
        ;;
    run)
        lang_prepare "$2"
        parse_run_args "$@"
        run_work
        ;;
    clean)
        lang_prepare "$2"
        docker_prepare
        work=$(get_work_name)
        $dku play $ilang /soda/framework/$ilang/work.sh clean $work
        ;;
    call)
        lang_prepare "$2"
        shift; shift;
        $dku exec $ilang /soda/framework/$ilang/work.sh "$@"
        ;;
    *)
        usage
        ;;
esac
